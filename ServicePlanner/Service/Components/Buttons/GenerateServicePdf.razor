@using BlazorTemplater
@using ServicePlanner.Service.Models
@using System.Text
@using WkHtmlToPdfDotNet
@using WkHtmlToPdfDotNet.Contracts

@inject IJSRuntime Js
@inject IConverter PdfConverter
@inject IStringLocalizer<Strings> Localize

<button type="button" class="btn btn-primary" @onclick="HandleClick">@Localize["ServiceEditor.GeneratePdf.Label"]</button>

@code {
    [Parameter]
    public List<ServiceItem> ServiceItems { get; set; } = new List<ServiceItem>();

    private void HandleClick(MouseEventArgs args)
    {
        GeneratePdf();
    }

    private void GeneratePdf()
    {
        var doc = new HtmlToPdfDocument()
            {
                GlobalSettings = {
                    ColorMode = ColorMode.Color,
                    Orientation = Orientation.Portrait,
                    PaperSize = PaperKind.A4,
                    Margins = new MarginSettings() { Top = 10 },
                },
                Objects = {
                new ObjectSettings()
                {
                    HtmlContent = RenderComponent()
                },
            }
            };

        byte[] pdfData = PdfConverter.Convert(doc);

        DownloadFile(pdfData);
    }

    private string RenderComponent()
    {
        var renderer = new ComponentRenderer<OrderOfServiceDisplay>();
        renderer.Set(c => c.ServiceItems, ServiceItems);
        renderer.AddService<IStringLocalizer<Strings>>(Localize);
        renderer.UseLayout<OrderOfServiceLayout>();
        return renderer.Render();
    }

    private void DownloadFile(byte[] pdfData)
    {
        FileUtility.SaveAs(Js, "OrderOfService.pdf", pdfData);
    }
}